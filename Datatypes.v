(*
    Boilerplate which is necessary for conversion between Coq and OCaml
    without using Obj.magic.
*)

Require Import String.
Require Import Parser.

Inductive token_ind :=
    | LD_WORD'tok : token_ind
    | LD_HALF'tok : token_ind
    | LD_BYTE'tok : token_ind
    | LD_OFST_WORD'tok : token_ind
    | LD_OFST_HALF'tok : token_ind
    | LDX_BYTE'tok : token_ind
    | LD_MEM'tok : token_ind
    | LDX_MEM'tok : token_ind
    | STORE'tok : token_ind
    | STORE_X'tok : token_ind
    | RET_A'tok : token_ind
    | RET_K'tok : token_ind
    | X_STORE_A'tok : token_ind
    | A_STORE_X'tok : token_ind
    | LDX_HDR_LEN'tok : token_ind
    | LD_IMM'tok : token_ind
    | ADD_IMM'tok : token_ind
    | SUB_IMM'tok : token_ind
    | MUL_IMM'tok : token_ind
    | DIV_IMM'tok : token_ind
    | AND_IMM'tok : token_ind
    | OR_IMM'tok : token_ind
    | SL_IMM'tok : token_ind
    | SR_IMM'tok : token_ind
    | ADD_X'tok : token_ind
    | SUB_X'tok : token_ind
    | MUL_X'tok : token_ind
    | DIV_X'tok : token_ind
    | AND_X'tok : token_ind
    | OR_X'tok : token_ind
    | SL_X'tok : token_ind
    | SR_X'tok : token_ind
    | NEG'tok : token_ind
    | JMP_IMM'tok : token_ind
    | LDX_IMM'tok : token_ind
    | JGT_IMM'tok : token_ind
    | JGE_IMM'tok : token_ind
    | JEQ_IMM'tok : token_ind
    | JAND_IMM'tok : token_ind
    | LD_LEN'tok : token_ind
    | LDX_LEN'tok : token_ind
    | JGT_X'tok : token_ind
    | JGE_X'tok : token_ind
    | JEQ_X'tok : token_ind
    | JAND_X'tok : token_ind
    | LPAREN'tok : unit -> token_ind
    | RPAREN'tok : unit -> token_ind
    | NUM'tok : nat -> token_ind
    | OP'tok : string -> token_ind
    | EOF'tok : unit -> token_ind.

(*
    Helper function to make expressions in get_token more readable.
    Essentially, get_sst just takes a terminal and a value of its
    corresponding semantic type, returning a token. This should
    likely be generated by "menhir --coq", but isn't.
*)
Definition get_sst (t : Gram.terminal) (sst : Gram.symbol_semantic_type (Gram.T t)) : Gram.token :=
    existT (fun t' => Gram.symbol_semantic_type (Gram.T t')) t sst.

Definition get_token (ti : token_ind) : Aut.GramDefs.token :=
    match ti with
        | LD_WORD'tok u =>
            get_sst Gram.LD_WORD'tok u
        | LD_HALF'tok u =>
            get_sst Gram.LD_HALF'tok u
        | LD_BYTE'tok u =>
            get_sst Gram.LD_BYTE'tok u
        | LD_OFST_WORD'tok u =>
            get_sst Gram.LD_OFST_WORD'tok u
        | LD_OFST_HALF'tok u =>
            get_sst Gram.LD_OFST_HALF'tok u
        | LDX_BYTE'tok u =>
            get_sst Gram.LDX_BYTE'tok u
        | LD_MEM'tok u =>
            get_sst Gram.LD_MEM'tok u
        | LDX_MEM'tok u =>
            get_sst Gram.LDX_MEM'tok u
        | STORE'tok u =>
            get_sst Gram.STORE'tok u
        | STORE_X'tok u =>
            get_sst Gram.STORE_X'tok u
        | RET_A'tok u =>
            get_sst Gram.RET_A'tok u
        | RET_K'tok u =>
            get_sst Gram.RET_K'tok u
        | X_STORE_A'tok u =>
            get_sst Gram.X_STORE_A'tok u
        | A_STORE_X'tok u =>
            get_sst Gram.A_STORE_X'tok u
        | LDX_HDR_LEN'tok u =>
            get_sst Gram.LDX_HDR_LEN'tok u
        | LD_IMM'tok u =>
            get_sst Gram.LD_IMM'tok u
        | ADD_IMM'tok u =>
            get_sst Gram.ADD_IMM'tok u
        | SUB_IMM'tok u =>
            get_sst Gram.SUB_IMM'tok u
        | MUL_IMM'tok u =>
            get_sst Gram.MUL_IMM'tok u
        | DIV_IMM'tok u =>
            get_sst Gram.DIV_IMM'tok u
        | AND_IMM'tok u =>
            get_sst Gram.AND_IMM'tok u
        | OR_IMM'tok u =>
            get_sst Gram.OR_IMM'tok u
        | SL_IMM'tok u =>
            get_sst Gram.SL_IMM'tok u
        | SR_IMM'tok u =>
            get_sst Gram.SR_IMM'tok u
        | ADD_X'tok u =>
            get_sst Gram.ADD_X'tok u
        | SUB_X'tok u =>
            get_sst Gram.SUB_X'tok u
        | MUL_X'tok u =>
            get_sst Gram.MUL_X'tok u
        | DIV_X'tok u =>
            get_sst Gram.DIV_X'tok u
        | AND_X'tok u =>
            get_sst Gram.AND_X'tok u
        | OR_X'tok u =>
            get_sst Gram.OR_X'tok u
        | SL_X'tok u =>
            get_sst Gram.SL_X'tok u
        | SR_X'tok u =>
            get_sst Gram.SR_X'tok u
        | NEG'tok u =>
            get_sst Gram.NEG'tok u
        | JMP_IMM'tok u =>
            get_sst Gram.JMP_IMM'tok u
        | LDX_IMM'tok u =>
            get_sst Gram.LDX_IMM'tok u
        | JGT_IMM'tok u =>
            get_sst Gram.JGT_IMM'tok u
        | JGE_IMM'tok u =>
            get_sst Gram.JGE_IMM'tok u
        | JEQ_IMM'tok u =>
            get_sst Gram.JEQ_IMM'tok u
        | JAND_IMM'tok u =>
            get_sst Gram.JAND_IMM'tok u
        | LD_LEN'tok u =>
            get_sst Gram.LD_LEN'tok u
        | LDX_LEN'tok u =>
            get_sst Gram.LDX_LEN'tok u
        | JGT_X'tok u =>
            get_sst Gram.JGT_X'tok u
        | JGE_X'tok u =>
            get_sst Gram.JGE_X'tok u
        | JEQ_X'tok u =>
            get_sst Gram.JEQ_X'tok u
        | JAND_X'tok u =>
            get_sst Gram.JAND_X'tok u
        | LPAREN'tok u =>
            get_sst Gram.LPAREN't tt
        | RPAREN'tok u =>
            get_sst Gram.RPAREN't tt
        | NUM'tok n =>
            get_sst Gram.NUM't n
        | OP'tok str =>
            get_sst Gram.OP't str
        | EOF'tok u =>
            get_sst Gram.EOF't tt
    end.
