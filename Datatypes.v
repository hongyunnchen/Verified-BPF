(*
    Boilerplate which is necessary for conversion between Coq and OCaml
    without using Obj.magic.
*)

Require Import String.
Require Import Parser.

Inductive token_ind :=
    | LD_WORD'tok
    | LD_HALF'tok
    | LD_BYTE'tok
    | LD_OFST_WORD'tok
    | LD_OFST_HALF'tok
    | LDX_BYTE'tok
    | LD_MEM'tok
    | LDX_MEM'tok
    | STORE'tok
    | STORE_X'tok
    | RET_A'tok
    | RET_K'tok
    | X_STORE_A'tok
    | A_STORE_X'tok
    | LDX_HDR_LEN'tok
    | LD_IMM'tok
    | ADD_IMM'tok
    | SUB_IMM'tok
    | MUL_IMM'tok
    | DIV_IMM'tok
    | AND_IMM'tok
    | OR_IMM'tok
    | SL_IMM'tok
    | SR_IMM'tok
    | ADD_X'tok
    | SUB_X'tok
    | MUL_X'tok
    | DIV_X'tok
    | AND_X'tok
    | OR_X'tok
    | SL_X'tok
    | SR_X'tok
    | NEG'tok
    | JMP_IMM'tok
    | LDX_IMM'tok
    | JGT_IMM'tok
    | JGE_IMM'tok
    | JEQ_IMM'tok
    | JAND_IMM'tok
    | LD_LEN'tok
    | LDX_LEN'tok
    | JGT_X'tok
    | JGE_X'tok
    | JEQ_X'tok
    | JAND_X'tok

    | IMM'tok : imm -> token_ind
    | OFFSET'tok : imm -> token_ind
    | MEM_ADDR'tok : imm -> token_ind
    | PKT_ADDR'tok : imm -> token_ind

    | NEWLINE'tok
    | EOF'tok.

(*
    Helper function to make expressions in get_token more readable.
    Essentially, get_sst just takes a terminal and a value of its
    corresponding semantic type, returning a token. This should
    likely be generated by "menhir --coq", but isn't.
*)
Definition get_sst (t : Gram.terminal) (sst : Gram.symbol_semantic_type (Gram.T t)) : Gram.token :=
    existT (fun t' => Gram.symbol_semantic_type (Gram.T t')) t sst.

Definition get_token (ti : token_ind) : Aut.GramDefs.token :=
    match ti with
        | LD_WORD'tok =>
            get_sst Gram.LD_WORD't tt
        | LD_HALF'tok =>
            get_sst Gram.LD_HALF't tt
        | LD_BYTE'tok =>
            get_sst Gram.LD_BYTE't tt
        | LD_OFST_WORD'tok =>
            get_sst Gram.LD_OFST_WORD't tt
        | LD_OFST_HALF'tok =>
            get_sst Gram.LD_OFST_HALF't tt
        | LDX_BYTE'tok =>
            get_sst Gram.LDX_BYTE't tt
        | LD_MEM'tok =>
            get_sst Gram.LD_MEM't tt
        | LDX_MEM'tok =>
            get_sst Gram.LDX_MEM't tt
        | STORE'tok =>
            get_sst Gram.STORE't tt
        | STORE_X'tok =>
            get_sst Gram.STORE_X't tt
        | RET_A'tok =>
            get_sst Gram.RET_A't tt
        | RET_K'tok =>
            get_sst Gram.RET_K't tt
        | X_STORE_A'tok =>
            get_sst Gram.X_STORE_A't tt
        | A_STORE_X'tok =>
            get_sst Gram.A_STORE_X't tt
        | LDX_HDR_LEN'tok =>
            get_sst Gram.LDX_HDR_LEN't tt
        | LD_IMM'tok =>
            get_sst Gram.LD_IMM't tt
        | ADD_IMM'tok =>
            get_sst Gram.ADD_IMM't tt
        | SUB_IMM'tok =>
            get_sst Gram.SUB_IMM't tt
        | MUL_IMM'tok =>
            get_sst Gram.MUL_IMM't tt
        | DIV_IMM'tok =>
            get_sst Gram.DIV_IMM't tt
        | AND_IMM'tok =>
            get_sst Gram.AND_IMM't tt
        | OR_IMM'tok =>
            get_sst Gram.OR_IMM't tt
        | SL_IMM'tok =>
            get_sst Gram.SL_IMM't tt
        | SR_IMM'tok =>
            get_sst Gram.SR_IMM't tt
        | ADD_X'tok =>
            get_sst Gram.ADD_X't tt
        | SUB_X'tok =>
            get_sst Gram.SUB_X't tt
        | MUL_X'tok =>
            get_sst Gram.MUL_X't tt
        | DIV_X'tok =>
            get_sst Gram.DIV_X't tt
        | AND_X'tok =>
            get_sst Gram.AND_X't tt
        | OR_X'tok =>
            get_sst Gram.OR_X't tt
        | SL_X'tok =>
            get_sst Gram.SL_X't tt
        | SR_X'tok =>
            get_sst Gram.SR_X't tt
        | NEG'tok =>
            get_sst Gram.NEG't tt
        | JMP_IMM'tok =>
            get_sst Gram.JMP_IMM't tt
        | LDX_IMM'tok =>
            get_sst Gram.LDX_IMM't tt
        | JGT_IMM'tok =>
            get_sst Gram.JGT_IMM't tt
        | JGE_IMM'tok =>
            get_sst Gram.JGE_IMM't tt
        | JEQ_IMM'tok =>
            get_sst Gram.JEQ_IMM't tt
        | JAND_IMM'tok =>
            get_sst Gram.JAND_IMM't tt
        | LD_LEN'tok =>
            get_sst Gram.LD_LEN't tt
        | LDX_LEN'tok =>
            get_sst Gram.LDX_LEN't tt
        | JGT_X'tok =>
            get_sst Gram.JGT_X't tt
        | JGE_X'tok =>
            get_sst Gram.JGE_X't tt
        | JEQ_X'tok =>
            get_sst Gram.JEQ_X't tt
        | JAND_X'tok =>
            get_sst Gram.JAND_X't tt


        | IMM'tok i =>
            get_sst Gram.IMM't i
        | OFFSET'tok i =>
            get_sst Gram.OFFSET't i
        | MEM_ADDR'tok i =>
            get_sst Gram.MEM_ADDR't i
        | PKT_ADDR'tok i =>
            get_sst Gram.PKT_ADDR't i

        | NEWLINE'tok =>
            get_sst Gram.NEWLINE't tt
        | EOF'tok =>
            get_sst Gram.EOF't tt
    end.
